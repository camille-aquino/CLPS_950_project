%function [count_ap] = count_successful_aps_camille(d, lowerl, upperl, sweep, width)

        % counting the number of derivatives that are close to 0
        % Step 1: form derivative -- diff(y) - diff(x)

%dy = diff(d(lowerl:upperl,3,sweep)) ./ diff(lowerl:upperl);

        % detect when the derivative is very different from 0 (difference > ?), then
        % start counting APs


%start_loc = find(abs(dy) > 0.1, 1); % finds first place where dy is much greater than 0 (i.e. 0.5)

%dy = dy(start_loc:end); % but is this in the right dimension??

%numzero = [];

%count_ap = 0;

%for i = start_loc:400:upperl-400 % assuming 400 is the width of each ap
%    dy_bit = dy(i:i+400);
%    numzero = sum(abs(dy_bit) <= 0.01); % count how many derivatives are close to 0
%    if(numzero >= 4) % successful AP if at least 4 0s
%        count_ap = count_ap+1;
%    end
%end

%count_ap

%end


            %Check:      
            
            %size(d)
            %lowerl = 30000;
            %upperl = 60000;
            %sweep = 1;
            %width = 0.08

            % did 1 to 30000 , then 30000 to 60000
                % got 46 + 96 = 142 APs for sweep 1
            % can't do the full 1 to 60000 because in my dy formula it creates an array
            % that's too large for matlab to process. It seems 30000 is an okay amount
            % to go up by. Should make a function that maybe loops this by 10000 at a
            % time and counts the number of APs of each set of 10000. And this is all
            % for one single sweep, so I should also loop this for the certain amount
            % of sweeps. 